-----------------------------------------------------------------------------
            ABSTRACTION -- FINALISATION -- SURCHARGE -- TRAIT

   -une classe abstrait n'est pas instanciable
    -Les methodes abstraite n'ont pas de contenu
    -Lorsque l'on herite de methode abstraites, nous sommes obligé de les redefinir
    -pour definir des methodes abstraites, il est necessaire que la classe qui les contiennent soit abstraite

    Le developpeur quie ecirt la classe 'Joueur" est au coeur de l'application (noyau) et va obliger les autre developpeur a redefinir les methodes  EtreMajeur() et Devise().
    C'est une methodologie de travail. On impose de bonne contraintes



abstract class Joueur 
{
    public function seConnecter(){return $this->EtreMajeur();}
    abstract public function EtreMajeur();
    abstract public function Devise();

}
-------$test = new Joueur;/!\ ERREUR !! une classe abstraite n'est pas instanciable

class JoueurFr extends Joueur
{
    public function EtreMajeur(){return 18;}
    public function Devise(){return '€';}
}

$joueurFr = new JoueurFR;
echo "il faut avoir au moin <strong>".$joueurFr->EtreMajeur()." ans </strong> pour pouvoir s'inscrire avec la devise <strong>".$joueurFr->Devise()."</strong><hr>";


class JoueurUs extends Joueur
{
    public function EtreMajeur(){return 21;}
    public function Devise(){return '$';}
}

$joueurUs = new JoueurUs;
echo "il faut avoir au moin <strong> ".$joueurUs->EtreMajeur()." ans </strong> pour pouvoir s'inscrire avec la devise <strong> ".$joueurUs->Devise()."</strong><hr>";

----FINALISATION-----------

final class Application
{
    public function LancementApplication()
    {return"L'appli se lance comme cela!!<hr>";}
}

//Final permet de verouiller une class ou une methode, c'est une methodologie de tavail 
$app = new Application; 
-- une class final est bien instanciable

echo'<pre>';var_dump($app);echo'</pre>';
echo $app->LancementApplication();

--class Test extends Application{}---- ERREUR !! il n'est pas possible d'heriter d'une class finale

class Application2
{
    final public function lancementApplication(){return"L'application se lance ainsi!!<hr>";}
}

class Extension extends Application2
{

-- public function lancementApplication(){} ERREUR en cas d'heritage, il n'est pas possible de redeclarer une method 'final', Elle est verouille, on ne peux la sucharger/ameliorer

}

$ext = new Extension;
echo $ext->lancementApplication();

-- L'interet de mettre le mot clef 'final' sur une methode est de verouiller afin d'empecher toute sous class de la redefinir (quand nous voulons que le comportement d'une methode soit preserver durant l'heritage)

---------SURCHARGE------------

class A
{
    public function calcul(){return 10;}
}


class B extends A
{
    public function calcul(){$nb=parent::calcul(); 
--parent fonctionne pour appeler une methode d'une classe parent lors d'une surcharge (override)
-- une surcharge permet de prendre en compte le comportement de la fonction d'origine et d'y ajouter un traitement complementaire
-- permet d'ameliorer ou de changer le comportement d'un methode


                if($nb <=100)return "$nb est inferieur ou egal a 100<hr>";
                else        return "$nb est superieur 100<hr>";
}
}

--Pour la surcharge, si on ne faisait pas ca dans wordpress, on ne pourrais pas mettre a jour les CMS, on modifierais directementles fonction du coeur

$b =new B;
echo $b->calcul();
-->"10 est inferieur ou egal a 100"

--------TRAIT---------------












































